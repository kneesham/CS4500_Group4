<div class="@backgroundimg">
    <header>
		<div class="deck-logo"> <!-- ## Start Logo part ## -->
			<img src="../img/deck-logo.png" alt="ZooBreakout!"/>
		</div> <!-- ## End Logo part ## -->
	</header>
	
	<div class="flex-container">
		<div class="flex-row">
			<span class="flex-item"> Elapsed time: <b id="elapsed-time">00:00</b></span>
		</div>
		<div class="flex-row">
			<span class="flex-item"> Player name: <b id="player-name">Demo</b></span>
		</div>
		<div class="flex-row">
			<span class="flex-item"> Round number: <b id="Round-number">00</b></span>
		</div>
	</div>

	<section id="game1">
		<div id="cards1">
		    @UnwinnableString
            @if (!UserWon && CanStillPlay)
            {
                int count = 0;
                <div class="row">
                    @foreach(var card in TheDeck.Cards)
                    {
                        int index = count;
                        <div class="col justify-content-center">
                            @if (card == 0)
                            {
                                <img src=@Cards[CardFaces[index]] alt="card" width="100%" style="margin:2px;max-width:200px;" @onclick="() => CardClicked(index)">
                            }
                            else if (card == 1)
                            {
                                <img src="../img/cards/back_card.png" alt="card" width="100%" style="margin:2px;max-width:200px;" @onclick="() => CardClicked(index)">
                            }
                            else
                            {
                                <img src="../img/cards/blank_card.png" alt="card" width="100%" style="margin:2px;max-width:200px;opacity:0;" @onclick="() => CardClicked(index)">
                            }
                            <DropTarget T="String" Drop="@OnDrop" DropTargetNumber="@index">
                                    <div class="drop-target">
                                        @if (Chevrons[index] == "left")
                                        {
                                            <img src="../img/left-chevron.png" alt="chevron" width="50px">
                                        }
                                        else if (Chevrons[index] == "right")
                                        {
                                            <img src="../img/right-chevron.png" alt="chevron" width="50px">
                                        }
                                        else
                                        {
                                            <img src="../img/blank-chevron.png" alt="chevron" width="50px">
                                        }
                                    </div>
                                </DropTarget>
                        </div>
                        count++;
                    }
                </div>
                <div class="row">
                    <div class="col-2">
                        <Draggable Data="@draggableDataA">
                            <div class="draggable">
                                <img src="../img/left-chevron.png" alt="chevron" width="50px">
                            </div>
                        </Draggable>
                    </div>
                    <div class="col-2">
                        <Draggable Data="@draggableDataB">
                            <div class="draggable">
                                <img src="../img/right-chevron.png" alt="chevron" width="50px">
                            </div>
                        </Draggable>
                    </div>
                    <div class="col-8 d-flex align-items-center justify-content-center">
                        <a class="st-btn btn-fill" data-toggle="modal" data-target="#" style="margin-top:20px;" 
                        disabled="@ButtonDisabled" @onclick="Unwinnable">Unwinnable!</a>
                    </div>
                </div>
            }
		</div> <!-- #cards -->
	</section> <!-- #game -->

    @if (UserWon || (!CanStillPlay && !UserWon) || NumberOfRounds == 0)
    {
        <section id="popup">
            <div id="popup-bg"></div>
            <div id="popup-box">
                <div id="popup-box-content">
                    @if (UserWon && !NeedsToPick)
                    {
                        Wins++;
                        <h1 class="display-1">You Won!</h1>
                        <p>@UnwinnableString</p>
                        <a class="st-btn btn-fill" data-toggle="modal" data-target="#" style="margin-top:20px;" @onclick="@(() => NeedsToPick = true)">Next Game!</a>
                        <a class="st-btn btn-fill" data-toggle="modal" data-target="#" style="margin-top:20px;" 
                            @onclick="() => InfiniteComplete.InvokeAsync(Tuple.Create(Wins, CorrectUnwinnables))">Quit</a>
                    }
                    else if (!CanStillPlay && !UserWon && !NeedsToPick)
                    {
                        ButtonDisabled = true;
                        <h1 class="display-1">You Lost!</h1>
                        <a class="st-btn btn-fill" data-toggle="modal" data-target="#" style="margin-top:20px;" @onclick="@(() => NeedsToPick = true)">Next Game!</a>
                        <a class="st-btn btn-fill" data-toggle="modal" data-target="#" style="margin-top:20px;" 
                            @onclick="() => InfiniteComplete.InvokeAsync(Tuple.Create(Wins, CorrectUnwinnables))">Quit</a>
                    }
                    else if (NumberOfRounds == 0 || NeedsToPick)
                    {
                        ButtonDisabled = true;
                        <h1 class="display-5">Choose Deck Size</h1>
                        <p style="font-size:20px">(Between 1 and 15)</p>
                        <div class="input-group input-group-lg">
                            <input type="number" min="1" max="15" class="form-control" aria-label="Sizing example input" 
                                aria-describedby="inputGroup-sizing-lg" @bind="NumberofCards" @bind:event="oninput">
                            <a class="st-btn btn-fill" data-toggle="modal" data-target="#" style="margin-top:20px;" @onclick="NextGame">Next Game!</a>
                            <br><span style="color:red;font-size:15px;" hidden="@MessageHidden">Must be between 1 and 15</span>
                        </div>
                    }
                </div>
            </div>
        </section>
    }
</div>

@code {
    [Parameter]
    public EventCallback<Tuple<int, int>> InfiniteComplete { get; set; }
    public int CorrectUnwinnables { get; set; } = 0;
    public int Wins { get; set; } = 0;
    public Deck TheDeck { get; set; }
    public bool UserWon { get; set; } = false;
    public int NumberOfRounds { get; set; } = 0;
    public bool CanStillPlay { get; set; } = true;
    public bool GameWinnable{ get; set; }
    public string[] Chevrons { get; set; } = new string[7];
    string draggableDataA = "left";
    string draggableDataB = "right";
    public string UnwinnableString { get; set; } = "";
    public string[] Cards = new string[] {
        "../img/cards/bear_card.png", "../img/cards/cat_card.png", "../img/cards/flamingo_card.png", 
        "../img/cards/iguana_card.png", "../img/cards/jellyfish_card.png", "../img/cards/kangoroo_card.png", 
        "../img/cards/lion_card.png", "../img/cards/owl_card.png"
    };
    public int[] CardFaces = new int[7];
    Random random = new Random(DateTime.Now.Millisecond);
    public bool ButtonDisabled { get; set; } = false;
    public string backgroundimg { get; set; } = "";
    public int NumberofCards { get; set; } = 10;
    public bool NeedsToPick { get; set; } = true;
    public bool MessageHidden { get; set; } = true;


    protected override void OnInitialized()
    {
        Chevrons = new string[NumberofCards];
        CardFaces = new int[NumberofCards];

        // setup game
        TheDeck = new Deck(NumberofCards);
        CanStillPlay = true;
        GameWinnable = TheDeck.WinPossible(1);

        // pick random card faces
        for (int i = 0; i < NumberofCards; i++)
            CardFaces[i] = random.Next(Cards.Length);

        // pick random background
        int imagenum = random.Next(0, 3);
        if (imagenum == 0)
            backgroundimg = "image1";
        else if (imagenum == 1)
            backgroundimg = "image2";
        else
            backgroundimg = "image3";

        base.OnInitialized();
    }

    public void CardClicked(int card)
    {
        TheDeck.ChangeCard(card);
        UserWon = TheDeck.CheckWin();
        CanStillPlay = TheDeck.WinPossible(0);
    }

    public void NextGame()
    {
        // validate user input
        if (NumberofCards < 1 || NumberofCards > 15)
        {
            MessageHidden = false;
            return;
        }
        
        MessageHidden = true;
        Chevrons = new string[NumberofCards];
        CardFaces = new int[NumberofCards];
        NeedsToPick = false;
        NumberOfRounds++;
        TheDeck = new Deck(NumberofCards);
        for (int i = 0; i < NumberofCards; i++)
            CardFaces[i] = random.Next(Cards.Length);
        Chevrons = new string[NumberofCards];
        GameWinnable = TheDeck.WinPossible(1);
        UserWon = false;
        CanStillPlay = true;
        ButtonDisabled = false;
        UnwinnableString = "";
    }

    public void OnDrop(Tuple<int, string> data)
    {
        Chevrons[data.Item1] = data.Item2;
    }

    public void Unwinnable()
    {
        if (!GameWinnable)
        {
            UnwinnableString = "You are right! The game is unwinnable";
            UserWon = true;
            CorrectUnwinnables++;
        }
        else
        {
            UnwinnableString = "You are wrong! You can win this game!";
        }
    }
}